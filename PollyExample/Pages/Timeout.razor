@page "/timeout"
@using System.Linq
@using System.Net.Http.Json
@using System.Threading
@using Newtonsoft.Json
@using Polly
@using Polly.Contrib.WaitAndRetry
@using Polly.Extensions.Http
@using Polly.Retry
@using Polly.Timeout
@using PollyExample.Services
@using WeatherForecastService

@inject HttpClient httpClient

<h1>Timeout</h1>

<p>Warte 2 Sekunden, ansonsten logge einen Fehler</p>

<table class="table">
    <thead>
    <tr>
        <th>Versuch</th>
        <th>Zeit</th>
        <th>Meldung</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var fetchError in errors)
    {
        <tr>
            <td>@fetchError.Item1</td>
            <td>@fetchError.Item2</td>
            <td>@fetchError.Item3</td>
        </tr>
    }
    </tbody>
</table>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private List<Tuple<string, string, string>> errors = new();

    protected override async Task OnInitializedAsync()
    {
        var timeoutPolicy = Policy.TimeoutAsync(2, (context, timespan, task) =>
        {
            return Task.Run(() =>
            {
                errors.Add(new Tuple<string, string, string>(
                    String.Empty,
                    String.Empty,
                    $"Execution timed out after {timespan.TotalSeconds} seconds."));

                InvokeAsync(StateHasChanged);
            });
        });

        try
        {
            var response = await timeoutPolicy.ExecuteAsync(async ct => await httpClient.GetAsync("https://localhost:5001/WeatherForecast", ct), CancellationToken.None);
        
            var responseBody = await response.Content.ReadAsStringAsync();
      
            forecasts = JsonConvert.DeserializeObject<IEnumerable<WeatherForecast>>(responseBody)?.ToArray();
        }
        catch (Exception e)
        {
        }
    }

}