@page "/circuitbreaker"
@using System.Linq
@using System.Net.Http.Json
@using System.Threading
@using Newtonsoft.Json
@using Polly
@using Polly.CircuitBreaker
@using Polly.Contrib.WaitAndRetry
@using Polly.Extensions.Http
@using Polly.Retry
@using PollyExample.Services
@using WeatherForecastService

@inject HttpClient httpClient

<h1>Circuit Breaker</h1>

<p>Versuche max. 40 mal den WeatherForecastService aufzurufen. Nach 2 fehlerhaften Versuchen wird der Circuit Breaker für 10 Sekunden geöffnet</p>

<p>Circuit Breaker State: @circuitState</p>

<table class="table">
    <thead>
    <tr>
        <th>Versuch</th>
        <th>Zeit</th>
        <th>Meldung</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var fetchError in errors)
    {
        <tr>
            <td>@fetchError.Item1</td>
            <td>@fetchError.Item2</td>
            <td>@fetchError.Item3</td>
        </tr>
    }
    </tbody>
</table>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private List<Tuple<string, string, string>> errors = new();
    private CircuitState circuitState = CircuitState.Closed;

    protected override async Task OnInitializedAsync()
    {
        var circuitBreakerPolicy = HttpPolicyExtensions
            .HandleTransientHttpError() // Handle HttpRequestExceptions, 408 and 5xx status codes
            .OrResult(msg => msg.StatusCode == System.Net.HttpStatusCode.NotFound) // Handle 404 not found
            .OrResult(msg => msg.StatusCode == System.Net.HttpStatusCode.Unauthorized) // Handle 401 Unauthorized
            .CircuitBreakerAsync(2, TimeSpan.FromSeconds(10),
                (message, timespan) =>
                {
                    errors.Add(new Tuple<string, string, string>(
                        "Circuit Breaker",
                        timespan.ToString(),
                        message.Exception.Message));

                    InvokeAsync(StateHasChanged);
                },
                () =>
                {
                    circuitState = CircuitState.Closed;
                    
                    InvokeAsync(StateHasChanged);
                },
                () =>
                {
                    circuitState = CircuitState.HalfOpen;
                    
                    InvokeAsync(StateHasChanged);
                })
            ;

        await Task.Run(async () =>
        {
            for (int i = 0; i < 40; i++)
            {
                try
                {
                    var response = await circuitBreakerPolicy.ExecuteAsync(() => httpClient.GetAsync("https://localhost:5001/WeatherForecast"));

                    var responseBody = await response.Content.ReadAsStringAsync();

                    forecasts = JsonConvert.DeserializeObject<IEnumerable<WeatherForecast>>(responseBody)?.ToArray();
                }
                catch (Exception e)
                {
                    errors.Add(new Tuple<string, string, string>((i+1).ToString(), String.Empty, e.Message));

                    circuitState = circuitBreakerPolicy.CircuitState;

                    await InvokeAsync(StateHasChanged);
                }

                Thread.Sleep(1000);
            }
        });
    }

}