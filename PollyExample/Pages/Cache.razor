@page "/cache"
@using System.Linq
@using System.Net.Http.Json
@using Newtonsoft.Json
@using Polly
@using Polly.Contrib.WaitAndRetry
@using Polly.Extensions.Http
@using Polly.Retry
@using PollyExample.Services
@using WeatherForecastService

@inject HttpClient httpClient

<h1>Cache</h1>

<p>Hole bereits vorhandene Daten, um HTTP-Calls zu minimieren</p>

<table class="table">
    <thead>
    <tr>
        <th>Versuch</th>
        <th>Zeit</th>
        <th>Meldung</th>
    </tr>
    </thead>
    <tbody>
    @foreach (var fetchError in errors)
    {
        <tr>
            <td>@fetchError.Item1</td>
            <td>@fetchError.Item2</td>
            <td>@fetchError.Item3</td>
        </tr>
    }
    </tbody>
</table>

@if (forecasts == null)
{
    <p>
        <em>Loading...</em>
    </p>
}
else
{
    <table class="table">
        <thead>
        <tr>
            <th>Date</th>
            <th>Temp. (C)</th>
            <th>Temp. (F)</th>
            <th>Summary</th>
        </tr>
        </thead>
        <tbody>
        @foreach (var forecast in forecasts)
        {
            <tr>
                <td>@forecast.Date.ToShortDateString()</td>
                <td>@forecast.TemperatureC</td>
                <td>@forecast.TemperatureF</td>
                <td>@forecast.Summary</td>
            </tr>
        }
        </tbody>
    </table>
}

@code {
    private WeatherForecast[] forecasts;
    private List<Tuple<string, string, string>> errors = new();

    protected override async Task OnInitializedAsync()
    {
        
    }

}